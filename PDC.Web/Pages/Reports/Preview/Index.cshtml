@page
@model PDC.Web.Pages.Reports.PreviewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Preview</title>
    <script src="/js/jquery-2.2.4.min.js"></script>
    <script src="/js/bootstrap-3.3.7.min.js"></script>
    <script src="/css/moment/moment.js"></script>
    <script src="/js/smartresize.js"></script>
    <script src="/js/custom.js"></script>
    <script type="text/javascript" src="~/js/Chart.bundle.js"></script>
    <script type="text/javascript" src="~/js/jquery.flot.min.js"></script>
    <script type="text/javascript" src="~/js/jquery.flot.time.js"></script>
    <script type="text/javascript" src="~/js/jshashtable-2.1.js"></script>
    <script type="text/javascript" src="~/js/jquery.numberformatter-1.2.3.min.js"></script>
    <script type="text/javascript" src="~/js/jquery.flot.symbol.js"></script>
    <script type="text/javascript" src="~/js/jquery.flot.axislabels.js"></script>
    <link href="~/css/site.css" rel="stylesheet" />
    <script>
        var horizontalBarChartData = {
            labels: [@for (int i = 0; i < Model.rangkings.Count; i++)
            {
                if (i < Model.rangkings.Count - 1)
                {
                    @: "@Model.rangkings[i].type.type_name",
                }
                else
                {
                    @: "@Model.rangkings[i].type.type_name"
                }
            }
                    @*@for (int j = 0; j < Model.rangkings.Count; j++)
                    {
                        if (Model.rangkings[j].type.type_name.ToUpper() == "BORDERLINE" && Model.rangkings[j].zScore > 0)
                        {
                            @: ,"@Model.rangkings[j].type.type_name"
                        }
                    }*@
            ],
            datasets: [{
                label: 'Z-Score',
                backgroundColor: "rgba(220,220,220,0.5)",
                data: [
                        @for (int i = 0; i < Model.rangkings.Count; i++)
                        {
                            if (i < Model.rangkings.Count - 1) {
                                @: @Model.rangkings[i].zScore.ToString("#.###0"),
                            } else {
                                @: @Model.rangkings[i].zScore.ToString("#.###0")
                            }
                        }
                        @*@for (int j = 0; j < Model.rangkings.Count; j++)
                        {
                            if (Model.rangkings[j].type.type_name.ToUpper() == "BORDERLINE" && Model.rangkings[j].zScore > 0)
                            {
                                @: ,@Model.rangkings[j].zScore
                            }
                        }*@
                ]
            }]
        };

        window.onload = function () {
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myHorizontalBar = new Chart(ctx, {
                type: 'horizontalBar',
                data: horizontalBarChartData,
                options: {
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide and green
                    elements: {
                        rectangle: {
                            borderWidth: 2,
                            borderColor: 'rgb(0, 255, 0)',
                            borderSkipped: 'left'
                        }
                    },
                    responsive: true,
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Profile Graphic'
                    }
                }
            });
        };
    </script>
    <style>
        canvas {
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
        }
    </style>
    
</head>
<body>
    <a href="#" class="btn btn-default" type="button" value="Print" id="btnPrint" onclick="window.print()">Print</a>
    <div style="width: 21cm; min-height: 29.7cm; padding: 2cm; margin: 1cm auto;" id="divPrint">
        <div style="padding:10px; background-color:#fff;">
            @Html.Raw(Model.tApplicantProgram.report_description);
        </div>
    </div>
</body>
</html>
<script type="text/javascript" src="~/js/jspdf.min.js"></script>
<script type="text/javascript" src="~/js/html2pdf.js"></script>
<script>
    var doc = new jsPDF('p', 'pt', 'letter');
    var specialElementHandlers = {
        '#editor': function (element, renderer) {
            return true;
        }
    };
    $('#btnPrint').click(function () {
        //var pdf = new jsPDF('p', 'pt', 'letter')

        //    // source can be HTML-formatted string, or a reference
        //    // to an actual DOM element from which the text will be scraped.
        //    , source = $('#divPrint')[0]

        //    // we support special element handlers. Register them with jQuery-style
        //    // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
        //    // There is no support for any other type of selectors
        //    // (class, of compound) at this time.
        //    , specialElementHandlers = {
        //        // element with id of "bypass" - jQuery style selector
        //        '#bypassme': function (element, renderer) {
        //            // true = "handled elsewhere, bypass text extraction"
        //            return true
        //        }
        //    }

        //margins = { top: 80, bottom: 60, left: 40, width: 522 };
        //// all coords and widths are in jsPDF instance's declared units
        //// 'inches' in this case
        //pdf.fromHTML(
        //    source // HTML string or DOM elem ref.
        //    , margins.left // x coord
        //    , margins.top // y coord
        //    , {
        //        'width': margins.width // max width of content on PDF
        //        , 'elementHandlers': specialElementHandlers
        //    },
        //    function (dispose) {
        //        // dispose: object with X, Y of the last line add to the PDF
        //        //          this allow the insertion of new lines after html
        //        pdf.save('Profile.pdf');
        //    },
        //    margins
        //)
        

        $("#divPrint").print();
    })
</script>
<script>
    function printDiv() {
        var divToPrint = document.getElementById('divPrint');
        var newWin = window.open('', 'Print-Window');
        newWin.document.open();
        newWin.document.write('<html><body onload="window.print()">' + divToPrint.innerHTML + '</body></html>');
        newWin.document.close();
        setTimeout(function () { newWin.close(); }, 10);
    }
</script>